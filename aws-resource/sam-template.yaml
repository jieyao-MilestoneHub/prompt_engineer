AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM template to deploy Lambda functions and DynamoDB tables for image generation and prompt optimization with tags.

Parameters:
  S3BucketName:
    Type: String
    Default: creative360-datateam-image-generator-optimization
    Description: The S3 bucket where Lambda function code is stored.

  S3Prefix:
    Type: String
    Default: prompt-engineer-manul
    Description: The S3 prefix where Lambda function code is stored.

Resources:
  # DynamoDB Table to save prompts and associated tags
  PromptsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: PromptsTable
      AttributeDefinitions:
        - AttributeName: prompt_id
          AttributeType: S
        - AttributeName: labels
          AttributeType: S  # Attribute for GSI
      KeySchema:
        - AttributeName: prompt_id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: LabelsIndex
          KeySchema:
            - AttributeName: labels
              KeyType: HASH
          Projection:
            ProjectionType: ALL
      BillingMode: PAY_PER_REQUEST  # Use on-demand billing mode, no need for ProvisionedThroughput

  # DynamoDB Table to save available tags
  LabelsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LabelsTable
      AttributeDefinitions:
        - AttributeName: label_id
          AttributeType: S
      KeySchema:
        - AttributeName: label_id
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST  # Use on-demand billing mode, no need for ProvisionedThroughput

  # IAM Role for Lambda Execution with CloudWatch and DynamoDB permissions
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${AWS::StackName}-LambdaExecutionRole"
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: LambdaExecutionPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:Scan
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                Resource:
                  - !GetAtt PromptsTable.Arn
                  - !GetAtt LabelsTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource: "*"
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "arn:aws:logs:*:*:*"

  # Lambda Function: ImageProcessingFunction
  ImageProcessingFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-ImageProcessingFunction"
      Handler: imageProcessing.lambda_handler
      Runtime: python3.11
      CodeUri:
        Bucket: !Ref S3BucketName
        Key: !Sub "${S3Prefix}/lambda/imageProcessing.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 120
      MemorySize: 1024

  # Lambda Function: OptimizePromptFunction
  OptimizePromptFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-OptimizePromptFunction"
      Handler: OptimizePrompt.lambda_handler
      Runtime: python3.11
      CodeUri:
        Bucket: !Ref S3BucketName
        Key: !Sub "${S3Prefix}/lambda/optimizePrompt.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 60
      MemorySize: 512

  # Lambda Function: SavePromptFunction
  SavePromptFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-SavePromptFunction"
      Handler: savePrompt.lambda_handler
      Runtime: python3.11
      CodeUri:
        Bucket: !Ref S3BucketName
        Key: !Sub "${S3Prefix}/lambda/savePrompt.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

  # Lambda Function: AddLabelFunction
  AddLabelFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "${AWS::StackName}-AddLabelFunction"
      Handler: addLabel.lambda_handler
      Runtime: python3.11
      CodeUri:
        Bucket: !Ref S3BucketName
        Key: !Sub "${S3Prefix}/lambda/addLabel.zip"
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 30
      MemorySize: 128

Outputs:
  # Output for the ImageProcessingFunction Lambda ARN
  ImageProcessingFunctionArn:
    Description: ARN of the Lambda function for image processing
    Value: !GetAtt ImageProcessingFunction.Arn

  # Output for the OptimizePromptFunction Lambda ARN
  OptimizePromptFunctionArn:
    Description: ARN of the Lambda function for prompt optimization
    Value: !GetAtt OptimizePromptFunction.Arn

  # Output for the SavePromptFunction Lambda ARN
  SavePromptFunctionArn:
    Description: ARN of the Lambda function to save prompts
    Value: !GetAtt SavePromptFunction.Arn

  # Output for the AddLabelFunction Lambda ARN
  AddLabelFunctionArn:
    Description: ARN of the Lambda function to add labels
    Value: !GetAtt AddLabelFunction.Arn

  # Output for the DynamoDB Tables ARNs
  PromptsTableArn:
    Description: The ARN of the DynamoDB Table for prompts and their associated tags
    Value: !GetAtt PromptsTable.Arn

  LabelsTableArn:
    Description: The ARN of the DynamoDB Table for tags
    Value: !GetAtt LabelsTable.Arn
